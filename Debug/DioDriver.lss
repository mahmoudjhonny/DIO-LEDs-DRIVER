
DioDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d35  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000742  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000661  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e4  00000000  00000000  00002659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 91 01 	call	0x322	; 0x322 <main>
  64:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Button_Init>:
#include "DIO_INTERFACE.h"
#include "BUTTON_INTERFACE.h"
#include "BUTTON_CONFIG.h"

void Button_Init() {
	Dio_Void_Set_Pin_Dir(BUTTON_PORT, BUTTON_PIN, INPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
  76:	08 95       	ret

00000078 <BUTTON_PUSH>:
}

u8 BUTTON_PUSH() {
	return DIO_U8_Get_Pin_Val(BUTTON_PORT, BUTTON_PIN);
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	0e 94 21 01 	call	0x242	; 0x242 <DIO_U8_Get_Pin_Val>
}
  80:	08 95       	ret

00000082 <Dio_Void_Set_Pin_Dir>:
#include "DIO_PRIVATE.h"
#include "STD_TYPE.h"
#include "DIO_INTERFACE.h"

void Dio_Void_Set_Pin_Dir(u8 u8_port, u8 u8_pin, u8 u8_dir) {
	if(u8_dir == OUTPUT) {
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	a1 f5       	brne	.+104    	; 0xee <Dio_Void_Set_Pin_Dir+0x6c>
		switch(u8_port) {
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <Dio_Void_Set_Pin_Dir+0x2a>
  8a:	28 f0       	brcs	.+10     	; 0x96 <Dio_Void_Set_Pin_Dir+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <Dio_Void_Set_Pin_Dir+0x40>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <Dio_Void_Set_Pin_Dir+0x56>
  94:	08 95       	ret
			case PORTA: 
				SET_BIT(DDRA_REG, u8_pin);
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <Dio_Void_Set_Pin_Dir+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <Dio_Void_Set_Pin_Dir+0x1c>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
				break;
  aa:	08 95       	ret
			case PORTB:
				SET_BIT(DDRB_REG, u8_pin);
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_Void_Set_Pin_Dir+0x36>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_Void_Set_Pin_Dir+0x32>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
				break;
  c0:	08 95       	ret
			case PORTC:
				SET_BIT(DDRC_REG, u8_pin);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <Dio_Void_Set_Pin_Dir+0x4c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <Dio_Void_Set_Pin_Dir+0x48>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
				break;
  d6:	08 95       	ret
			case PORTD:
				SET_BIT(DDRD_REG, u8_pin);
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Dio_Void_Set_Pin_Dir+0x62>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <Dio_Void_Set_Pin_Dir+0x5e>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
				break;
  ec:	08 95       	ret
			default:
				break;	
		}
	} else if(u8_dir == INPUT) {
  ee:	41 11       	cpse	r20, r1
  f0:	37 c0       	rjmp	.+110    	; 0x160 <Dio_Void_Set_Pin_Dir+0xde>
		switch(u8_port) {
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <Dio_Void_Set_Pin_Dir+0x98>
  f6:	28 f0       	brcs	.+10     	; 0x102 <Dio_Void_Set_Pin_Dir+0x80>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <Dio_Void_Set_Pin_Dir+0xb0>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <Dio_Void_Set_Pin_Dir+0xc8>
 100:	08 95       	ret
			case PORTA:
				CLR_BIT(DDRA_REG, u8_pin);
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <Dio_Void_Set_Pin_Dir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <Dio_Void_Set_Pin_Dir+0x88>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
				break;
 118:	08 95       	ret
			case PORTB:
				CLR_BIT(DDRB_REG, u8_pin);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <Dio_Void_Set_Pin_Dir+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <Dio_Void_Set_Pin_Dir+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
				break;
 130:	08 95       	ret
			case PORTC:
				CLR_BIT(DDRC_REG, u8_pin);
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_Void_Set_Pin_Dir+0xbc>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_Void_Set_Pin_Dir+0xb8>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	84 bb       	out	0x14, r24	; 20
				break;
 148:	08 95       	ret
			case PORTD:
				CLR_BIT(DDRD_REG, u8_pin);
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_Void_Set_Pin_Dir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_Void_Set_Pin_Dir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <Dio_Void_Set_Pin_Val>:
			// Do Nothing
		}
}

void Dio_Void_Set_Pin_Val(u8 u8_port, u8 u8_pin, u8 u8_val) {
	if(u8_val == HIGH) {
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	a1 f5       	brne	.+104    	; 0x1ce <Dio_Void_Set_Pin_Val+0x6c>
		switch(u8_port) {
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	89 f0       	breq	.+34     	; 0x18c <Dio_Void_Set_Pin_Val+0x2a>
 16a:	28 f0       	brcs	.+10     	; 0x176 <Dio_Void_Set_Pin_Val+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	c9 f0       	breq	.+50     	; 0x1a2 <Dio_Void_Set_Pin_Val+0x40>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	11 f1       	breq	.+68     	; 0x1b8 <Dio_Void_Set_Pin_Val+0x56>
 174:	08 95       	ret
			case PORTA:
				SET_BIT(PORTA_REG, u8_pin);
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_Void_Set_Pin_Val+0x20>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_Void_Set_Pin_Val+0x1c>
 186:	82 2b       	or	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
				break;
 18a:	08 95       	ret
			case PORTB:
				SET_BIT(PORTB_REG, u8_pin);
 18c:	28 b3       	in	r18, 0x18	; 24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_Void_Set_Pin_Val+0x36>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_Void_Set_Pin_Val+0x32>
 19c:	82 2b       	or	r24, r18
 19e:	88 bb       	out	0x18, r24	; 24
				break;
 1a0:	08 95       	ret
			case PORTC:
				SET_BIT(PORTC_REG, u8_pin);
 1a2:	25 b3       	in	r18, 0x15	; 21
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Dio_Void_Set_Pin_Val+0x4c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Dio_Void_Set_Pin_Val+0x48>
 1b2:	82 2b       	or	r24, r18
 1b4:	85 bb       	out	0x15, r24	; 21
				break;
 1b6:	08 95       	ret
			case PORTD:
				SET_BIT(PORTD_REG, u8_pin);
 1b8:	22 b3       	in	r18, 0x12	; 18
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Dio_Void_Set_Pin_Val+0x62>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <Dio_Void_Set_Pin_Val+0x5e>
 1c8:	82 2b       	or	r24, r18
 1ca:	82 bb       	out	0x12, r24	; 18
				break;
 1cc:	08 95       	ret
			default:
				break;
		}
		} else if(u8_val == LOW) {
 1ce:	41 11       	cpse	r20, r1
 1d0:	37 c0       	rjmp	.+110    	; 0x240 <Dio_Void_Set_Pin_Val+0xde>
		switch(u8_port) {
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 f0       	breq	.+36     	; 0x1fa <Dio_Void_Set_Pin_Val+0x98>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <Dio_Void_Set_Pin_Val+0x80>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	d9 f0       	breq	.+54     	; 0x212 <Dio_Void_Set_Pin_Val+0xb0>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	29 f1       	breq	.+74     	; 0x22a <Dio_Void_Set_Pin_Val+0xc8>
 1e0:	08 95       	ret
			case PORTA:
				CLR_BIT(PORTA_REG, u8_pin);
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_Void_Set_Pin_Val+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_Void_Set_Pin_Val+0x88>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
				break;
 1f8:	08 95       	ret
			case PORTB:
				CLR_BIT(PORTB_REG, u8_pin);
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <Dio_Void_Set_Pin_Val+0xa4>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <Dio_Void_Set_Pin_Val+0xa0>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
				break;
 210:	08 95       	ret
			case PORTC:
				CLR_BIT(PORTC_REG, u8_pin);
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_Void_Set_Pin_Val+0xbc>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_Void_Set_Pin_Val+0xb8>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	85 bb       	out	0x15, r24	; 21
				break;
 228:	08 95       	ret
			case PORTD:
				CLR_BIT(PORTD_REG, u8_pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <Dio_Void_Set_Pin_Val+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <Dio_Void_Set_Pin_Val+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_U8_Get_Pin_Val>:
		}
}

u8 DIO_U8_Get_Pin_Val(u8 u8_port, u8 u8_pin) {
	u8 return_val = 0;
	switch(u8_port) {
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	79 f0       	breq	.+30     	; 0x264 <DIO_U8_Get_Pin_Val+0x22>
 246:	28 f0       	brcs	.+10     	; 0x252 <DIO_U8_Get_Pin_Val+0x10>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	a9 f0       	breq	.+42     	; 0x276 <DIO_U8_Get_Pin_Val+0x34>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	e1 f0       	breq	.+56     	; 0x288 <DIO_U8_Get_Pin_Val+0x46>
 250:	24 c0       	rjmp	.+72     	; 0x29a <DIO_U8_Get_Pin_Val+0x58>
		case PORTA: 
			return_val = GET_BIT(PINA_REG, u8_pin);
 252:	89 b3       	in	r24, 0x19	; 25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_U8_Get_Pin_Val+0x1a>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_U8_Get_Pin_Val+0x16>
 260:	81 70       	andi	r24, 0x01	; 1
			break;
 262:	08 95       	ret
		case PORTB:
			return_val = GET_BIT(PINB_REG, u8_pin);
 264:	86 b3       	in	r24, 0x16	; 22
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_U8_Get_Pin_Val+0x2c>
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_U8_Get_Pin_Val+0x28>
 272:	81 70       	andi	r24, 0x01	; 1
			break;
 274:	08 95       	ret
		case PORTC:
			return_val = GET_BIT(PINC_REG, u8_pin);
 276:	83 b3       	in	r24, 0x13	; 19
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_U8_Get_Pin_Val+0x3e>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_U8_Get_Pin_Val+0x3a>
 284:	81 70       	andi	r24, 0x01	; 1
			break;
 286:	08 95       	ret
		case PORTD:
			return_val = GET_BIT(PIND_REG, u8_pin);
 288:	80 b3       	in	r24, 0x10	; 16
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_U8_Get_Pin_Val+0x50>
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_U8_Get_Pin_Val+0x4c>
 296:	81 70       	andi	r24, 0x01	; 1
			break;
 298:	08 95       	ret
			// Do Nothing
		}
}

u8 DIO_U8_Get_Pin_Val(u8 u8_port, u8 u8_pin) {
	u8 return_val = 0;
 29a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return return_val;
}
 29c:	08 95       	ret

0000029e <LED_One_Void_ON>:
#include "DIO_INTERFACE.h"
#include "LED_INTERFACE.h"
#include "LED_Config.h"

void LED_One_Void_ON() {
	Dio_Void_Set_Pin_Dir(LED_PORTS, LED_ONE, OUTPUT);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORTS, LED_ONE, HIGH);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	67 e0       	ldi	r22, 0x07	; 7
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 2b2:	08 95       	ret

000002b4 <LED_TWO_Void_ON>:
}

void LED_TWO_Void_ON() {
	Dio_Void_Set_Pin_Dir(LED_PORTS, LED_TWO, OUTPUT);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORTS, LED_TWO, HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 2c8:	08 95       	ret

000002ca <LED_THREE_Void_ON>:
}

void LED_THREE_Void_ON() {
	Dio_Void_Set_Pin_Dir(LED_PORT, LED_THREE, OUTPUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORT, LED_THREE, HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 2de:	08 95       	ret

000002e0 <LED_Void_ONE_OFF>:
}

void LED_Void_ONE_OFF() {
	Dio_Void_Set_Pin_Dir(LED_PORTS, LED_ONE, OUTPUT);
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	67 e0       	ldi	r22, 0x07	; 7
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORTS, LED_ONE, LOW);
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	67 e0       	ldi	r22, 0x07	; 7
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 2f4:	08 95       	ret

000002f6 <LED_Void_TWO_OFF>:
}

void LED_Void_TWO_OFF() {
	Dio_Void_Set_Pin_Dir(LED_PORTS, LED_TWO, OUTPUT);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORTS, LED_TWO, LOW);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 30a:	08 95       	ret

0000030c <LED_Void_THREE_OFF>:
}

void LED_Void_THREE_OFF() {
	Dio_Void_Set_Pin_Dir(LED_PORT, LED_THREE, OUTPUT);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	63 e0       	ldi	r22, 0x03	; 3
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Void_Set_Pin_Dir>
	Dio_Void_Set_Pin_Val(LED_PORT, LED_THREE, LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	0e 94 b1 00 	call	0x162	; 0x162 <Dio_Void_Set_Pin_Val>
 320:	08 95       	ret

00000322 <main>:
#include "BUTTON_INTERFACE.h"
#include <util/delay.h>

int main(void)
{
	Button_Init();
 322:	0e 94 36 00 	call	0x6c	; 0x6c <Button_Init>
	while(1) {
		if(BUTTON_PUSH() == HIGH) {
 326:	0e 94 3c 00 	call	0x78	; 0x78 <BUTTON_PUSH>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x4>
				LED_One_Void_ON();
 32e:	0e 94 4f 01 	call	0x29e	; 0x29e <LED_One_Void_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	9c e0       	ldi	r25, 0x0C	; 12
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x16>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x20>
 342:	00 00       	nop
				_delay_ms(250);
				LED_Void_ONE_OFF();
 344:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_Void_ONE_OFF>
				LED_TWO_Void_ON();
 348:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LED_TWO_Void_ON>
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	84 e3       	ldi	r24, 0x34	; 52
 350:	9c e0       	ldi	r25, 0x0C	; 12
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x30>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x3a>
 35c:	00 00       	nop
				_delay_ms(250);
				LED_Void_TWO_OFF();
 35e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_Void_TWO_OFF>
				LED_THREE_Void_ON();
 362:	0e 94 65 01 	call	0x2ca	; 0x2ca <LED_THREE_Void_ON>
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	84 e3       	ldi	r24, 0x34	; 52
 36a:	9c e0       	ldi	r25, 0x0C	; 12
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x4a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x54>
 376:	00 00       	nop
				_delay_ms(250);
				LED_Void_THREE_OFF();
 378:	0e 94 86 01 	call	0x30c	; 0x30c <LED_Void_THREE_OFF>
				while(BUTTON_PUSH() == HIGH);
 37c:	0e 94 3c 00 	call	0x78	; 0x78 <BUTTON_PUSH>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	e1 f3       	breq	.-8      	; 0x37c <main+0x5a>
 384:	d0 cf       	rjmp	.-96     	; 0x326 <main+0x4>

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
